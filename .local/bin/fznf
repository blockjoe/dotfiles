#!/bin/bash

usage() {
	echo "fznf: A fuzzy finder for nerd-font icons."
	echo
	echo "Usage: fznf [-f <file>] [-x|i|u] [-c|r] [-s] [-h] [query]"
	echo "Arguments:"
	echo "  query, optional:        The optional starting query for fzf."
	echo
	echo "Options:"
	echo "  -f <file>, --file <file>:    The icon file to search"
	echo "                               default (.local/etc/fznf/icons.txt)"
	echo "  -h, --help:                  Print this help message."
	echo "  -s, --silent:                Supress the output."
	echo "  -r, --unamed:                Copy to the X11 buffer '*' (default)."
	echo "  -c, --clip:                  Copy to the desktop clipboard."
	echo "  -i, --icon:                  Copy the icon (default)."
	echo "  -u, --unicode:               Copy the unicode escaped codepoint."
	echo "  -x, --hex:                   Copy the native hex escaped format."
}

PARAMS=""
_INDEX_FILE="$HOME/.local/etc/fznf/icons.txt"
_ICON=yes
_UR=yes

while (("$#" )); do
	case "$1" in
		-h|--help)
			usage
			exit 0
			;;
		-f|--file)
			if [ -n "$2" ] && [ ${2:0:1} != "-"]; then
				_INDEX_FILE=$2
				shift 2
			else
				echo "Error: The icon file for ${1} was not provided." >&2
				usage
				exit 1
			fi
				;;
		-x|--hex)
			_HEX=yes
			_ICON=no
			_UNI=no
			shift
			;;
		-i|--icon)
			_ICON=yes
			_UNI=no
			_HEX=no
			shift
			;;
		-u|--unicode)
			_UNI=yes
			_ICON=no
			_HEX=no
			shift
			;;
		-s|--silent)
			_SILENT=yes
			shift
			;;
		-c|--clip)
			_CLIP=yes
			_UR=no
			shift
			;;
		-r|--unnamed)
			_UR=yes
			_CLIP=no
			shift
			;;
		-*|--*)
			echo "Unsupported flag ${1}" >&2
			usage
			exit 1
			;;
		*)
			PARAMS="$PARAMS $1"
			shift
			;;
	esac
done

eval set -- "$PARAMS"

hexFromGlyph() {
	if [ "$1" == "-n" ]; then
		outputSeparator=' '
		shift
	else
		outputSeparator='\n'
	fi
	for glyph in "$@"; do
		printf "\\\x%s" $(printf "$glyph"|xxd -p -c1 -u)
		echo -n -e "$outputSeparator"
	done
}

codePointFromGlyph() {
	_code="$(printf '%s' "$1" |
	iconv -f utf8 -t utf32be |
	xxd -p |
	sed -r 's/^0+/0x/')"
	printf '\\u%04X\n' "$_code"
}

_preview='_icon="$(echo {} | cut -d " " -f 1)"; _name="$(echo {} | cut -d " " -f 2)"; _fname="${_icon} - ${_name}"; _hex="$(printf "\\\x%s" $(printf "$_icon" | xxd -p -c1 -u))"; _uni="$(printf "%s" "$_icon" | iconv -f utf8 -t utf32be | xxd -p | sed -r "s/^0+/0x/")"; echo "$(echo "$_fname"; echo "Hex:   ${_hex}"; printf "UTF-8: \\\u%04X\n" "${_uni}")" | bat --style="grid"'

index="$HOME/.local/etc/fnfi/icons.txt"
if [ ! -z "$PARAMS" ]; then
	line="$(cat "$_INDEX_FILE" | fzf -q "$PARAMS" --preview "$_preview")"
else
	line="$(cat "$_INDEX_FILE" | fzf --preview "$_preview")"
fi

name="$(echo "$line" | cut -d " " -f 2)"
icon="$(echo "$line" | cut -d " " -f 1)"
native="$(hexFromGlyph "$icon")"
uni="$(codePointFromGlyph "$icon")"

if [ "$_HEX" == yes ]; then
	item_name="native hex value"
	copied="$native"
elif [ "$_UNI" == yes ]; then
	item_name="unicode value"
	copied="$uni"
elif [ "$_ICON" == yes ]; then
	item_name="icon"
	copied="$icon"
fi

if [ "$_CLIP" == yes ]; then
	location="system cliboard (\"+)"
	printf '%s' "$copied" | xclip -selection clipboard
elif [ "$_UR" == yes ]; then
	location="unamed register '\"*'"
	printf '%s' "$copied" | xclip
fi

if [ "$_SILENT" != yes ]; then
	if [ ! -z "$copied" ]; then
		echo "The following ${item_name} for ${name} was copied to the ${location}: ${copied}"
	fi
fi
