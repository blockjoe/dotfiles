#!/usr/bin/env python3
import argparse
import sys

import numpy as np
import plotext as plt
import sox.core as sxc
import sox.file_info as sxf


def read_audio(file, limit_samples=500):
    channels = sxf.channels(file)
    duration = sxf.duration(file)
    sox_args = '-t raw -e signed-integer -L -b 8 -'.split(" ")
    status, out, err = sxc.sox([file, *sox_args], decode_out_with_utf=False)
    if status != 0:
        print(status)
        raise RuntimeError("Sox failed the following error message: {}".format(err))
    raw = np.frombuffer(out, '<i1')
    amp = raw.reshape(int(raw.shape[0]//channels), channels).mean(axis=1)
    if limit_samples > 0:
        every = amp.shape[0] // limit_samples
        amp = amp[::every]
    return (amp, duration)

def plot_audio(wave, duration, fname=''):
    t = np.linspace(0, duration, len(wave))
    plt.clear_color()
    plt.scatter(t, wave, fillx=True, color=12)
    plt.frame(state=False)
    #plt.canvas_color("default")
    plt.xlabel("Time (seconds)")
    plt.yticks(ticks=None)
    if fname:
        plt.title(fname)
    plt.show()
    return

def main(args):
    try:
        t, amplitude = read_audio(args.file, args.samples)
    except RuntimeError as e:
        print(e)
        sys.exit(1)

    plot_audio(t, amplitude, args.file)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Get a terminal plot of an audio file")
    parser.add_argument("file", help="The audio file to be plotted")
    parser.add_argument("-s", "--samples", type=int, default=500, help="The number of samples to limit plotting to. Passing 0 or -1 will use every sample.")

    args = parser.parse_args()
    main(args)
